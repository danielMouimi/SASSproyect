//// Mixins SassDoc
//// @author Daniel

@use './variables' as *;

/// **Mixin para generar estilos de cabeceras (h1-h6)**
/// Aplica la misma familia y peso de fuente, pero con diferentes tamaños según el nivel de cabecera.
/// @group typography
/// @include genera-cabeceras()
@mixin genera-cabeceras() {
    @for $i from 1 through 6 {
        h#{$i}, .h#{$i} {
            font-family: $font-primary;
            font-weight: lighter;
        }
        @if $i == 1 {
            h#{$i}, .h#{$i} {
                font-size: size(xxl);
            }
        } @else if $i == 2 {
            h#{$i}, .h#{$i} {
                font-size: size(xl);
            }
        } @else if $i == 3 {
            h#{$i}, .h#{$i} {
                font-size: size(lg);
            }
        } @else if $i == 4 {
            h#{$i}, .h#{$i} {
                font-size: size(md);
            }
        } @else if $i == 5 {
            h#{$i}, .h#{$i} {
                font-size: size(sm);
            }
        } @else if $i == 6 {
            h#{$i}, .h#{$i} {
                font-size: size(xs);
            }
        }
    }
}

@include genera-cabeceras();

/// **Mixin para la estructura del navegador**
/// Define la disposición de una barra de navegación utilizando flexbox.
/// @group navigation
/// @include nav()
@mixin nav() {
    &-list {
        border-radius: 20px;
        @include flexbox(row, space-around, center);
        height: 100%;
    }
    
    &-item {
        list-style: none;
    }

    &-link {
        text-decoration: none;
        @include button();
    }
}

/// **Mixin para crear un contenedor flexible con flexbox**
/// @group layout
/// @param {string} $direction - Dirección del eje principal (`row` o `column`).
/// @param {string} $justify - Alineación horizontal (`center`, `flex-start`, `flex-end`, etc.).
/// @param {string} $align - Alineación vertical (`center`, `flex-start`, `flex-end`, etc.).
/// @example scss - Uso en una clase
///   .contenedor {
///       @include flexbox(row, center, center);
///   }
@mixin flexbox($direction: row, $justify: center, $align: center) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify;
    align-items: $align;
}

/// **Mixin para media queries**
/// Permite definir estilos responsivos basados en los tamaños definidos en `$breakpoints`.
/// @group responsive
/// @param {string} $size - Tamaño del breakpoint (`mobile`, `tablet`, `desktop`).
/// @example scss - Uso en una clase
///   .contenedor {
///       @include responsive("tablet") {
///           width: 80%;
///       }
///   }
@mixin responsive($size) {
    @media (max-width: map-get($breakpoints, $size)) {
        @content;
    }
}

/// **Mixin para botones**
/// Aplica estilos a los botones usando los colores definidos en `$button-colors`.
/// @group buttons
/// @example scss - Uso en una clase
///   .btn {
///       @include button();
///   }
@mixin button() {
    background-color: btnColor(back);
    border: 1px solid btnColor(border);
    color: btnColor(color);
    padding: 1rem 1.8rem;
    border-radius: 5px;
    text-transform: uppercase;
    font-family: $font-secondary;
    transition: 0.3s;

    &:hover {
        background-color: darken(color(primary), 10%);
        border: 1px solid btnColor(color);
    }
}

/// **Mixin para tarjetas (cards)**
/// Aplica estilos visuales a tarjetas con sombra y animación en hover.
/// @group cards
/// @example scss - Uso en una clase
///   .card {
///       @include card();
///   }
@mixin card() {
    background: color(primary);
    border-radius: 10px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    transition: transform 0.3s ease;
    
    &:hover {
        transform: scale(1.05);
    }

    &-img {
        width: 100%;
        height: auto;
        display: block;
    }

    &-content {
        padding: 15px;
        text-align: center;
    }
}

  

